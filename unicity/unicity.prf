(unicity
 (is_sorted_iff_sorted 0
  (is_sorted_iff_sorted-2 nil 3671551595
   ("" (skeep)
    (("" (prop)
      (("1" (expand "sorted")
        (("1" (expand "is_sorted?")
          (("1" (expand "psorted")
            (("1" (expand "finseq_appl")
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (skeep)
                    (("1" (inst -1 "k")
                      (("1" (prop)
                        (("1" (rewrite "same_nth_list_fseq")
                          (("1" (expand "finseq_appl")
                            (("1" (lemma "same_nth_list_fseq")
                              (("1"
                                (inst -1 "l" "k")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "is_sorted?")
        (("2" (skeep)
          (("2" (expand "sorted")
            (("2" (expand "psorted")
              (("2" (inst -1 "k")
                (("2" (prop)
                  (("1" (expand "finseq_appl")
                    (("1" (lemma "same_nth_fseq_list")
                      (("1" (lemma "same_nth_fseq_list")
                        (("1" (inst -1 "list2finseq(l)" "k")
                          (("1" (inst -2 "list2finseq(l)" "k + 1")
                            (("1" (expand "finseq_appl")
                              (("1"
                                (rewrite "fs2l_l2fs_is_id")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_sorted? const-decl "bool" sorting nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (same_nth_list_fseq formula-decl nil sorting_seq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (psorted const-decl "bool" sorting_seq nil)
    (sorted const-decl "bool" sorting_seq nil)
    (same_nth_fseq_list formula-decl nil sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (fs2l_l2fs_is_id formula-decl nil sorting_seq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (is_sorted_iff_sorted-1 nil 3671551540
   ("" (skeep)
    (("" (prop)
      (("1" (expand "sorted")
        (("1" (expand "is_sorted?")
          (("1" (expand "psorted")
            (("1" (expand "finseq_appl")
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (skeep)
                    (("1" (inst -1 "k")
                      (("1" (prop)
                        (("1" (rewrite "same_nth_list_fseq")
                          (("1" (expand "finseq_appl")
                            (("1" (lemma "same_nth_list_fseq")
                              (("1"
                                (inst -1 "l" "k")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "is_sorted?")
        (("2" (skeep)
          (("2" (expand "sorted")
            (("2" (expand "psorted")
              (("2" (inst -1 "k")
                (("2" (prop)
                  (("1" (expand "finseq_appl")
                    (("1" (lemma "same_nth_fseq_list")
                      (("1" (lemma "same_nth_fseq_list")
                        (("1" (inst -1 "list2finseq(l)" "k")
                          (("1" (inst -2 "list2finseq(l)" "k + 1")
                            (("1" (expand "finseq_appl")
                              (("1"
                                (rewrite "fs2l_l2fs_is_id")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fs2l_l2fs_is_id formula-decl nil sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (same_nth_fseq_list formula-decl nil sorting_seq nil)
    (sorted const-decl "bool" sorting_seq nil)
    (psorted const-decl "bool" sorting_seq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (same_nth_list_fseq formula-decl nil sorting_seq nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_sorted? const-decl "bool" sorting nil))
   nil))
 (sorted_iff_is_sorted 0
  (sorted_iff_is_sorted-2 nil 3671553000
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_sorted?")
        (("1" (skeep)
          (("1" (expand "sorted")
            (("1" (expand "psorted")
              (("1" (prop)
                (("1" (hide +) (("1" (grind) nil nil)) nil)
                 ("2" (hide +) (("2" (grind) nil nil)) nil)
                 ("3" (inst -1 "k")
                  (("1" (prop)
                    (("1" (expand "finseq_appl")
                      (("1" (lemma "same_nth_fseq_list")
                        (("1" (lemma "same_nth_fseq_list")
                          (("1" (inst -1 "s" "k")
                            (("1" (inst -2 "s" "k + 1")
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (typepred "k")
                                  (("2"
                                    (lemma "length_of_fs2list ")
                                    (("2"
                                      (inst -1 "s")
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_of_fs2list") nil nil))
                    nil)
                   ("2" (rewrite "length_of_fs2list")
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "sorted")
        (("2" (expand "is_sorted?")
          (("2" (expand "psorted")
            (("2" (expand "finseq_appl")
              (("2" (flatten)
                (("2" (hide 1)
                  (("2" (skeep)
                    (("2" (inst -1 "k")
                      (("1" (prop)
                        (("1" (lemma "same_nth_list_fseq")
                          (("1" (lemma "same_nth_list_fseq")
                            (("1" (inst -1 "finseq2list(s)" "k")
                              (("1"
                                (inst -2 "finseq2list(s)" "k + 1")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (rewrite "l2fs_fs2l_is_id")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1 2))
                                  (("2"
                                    (lemma "length_of_fs2list")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "length_of_fs2list")
                          (("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_of_fs2list")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((psorted const-decl "bool" sorting_seq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_of_fs2list formula-decl nil sorting_seq nil)
    (same_nth_fseq_list formula-decl nil sorting_seq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (length def-decl "nat" list_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (sorted const-decl "bool" sorting_seq nil)
    (is_sorted? const-decl "bool" sorting nil)
    (same_nth_list_fseq formula-decl nil sorting_seq nil)
    (l2fs_fs2l_is_id formula-decl nil sorting_seq nil))
   nil)
  (sorted_iff_is_sorted-1 nil 3671551617
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_sorted?")
        (("1" (skeep)
          (("1" (expand "sorted")
            (("1" (expand "psorted")
              (("1" (prop)
                (("1" (hide +) (("1" (grind) nil nil)) nil)
                 ("2" (hide +) (("2" (grind) nil nil)) nil)
                 ("3" (inst -1 "k")
                  (("1" (prop)
                    (("1" (expand "finseq_appl")
                      (("1" (lemma "same_nth_fseq_list")
                        (("1" (lemma "same_nth_fseq_list")
                          (("1" (inst -1 "s" "k")
                            (("1" (inst -2 "s" "k + 1")
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (typepred "k")
                                  (("2"
                                    (lemma "length_of_fs2list ")
                                    (("2"
                                      (inst -1 "s")
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_of_fs2list") nil nil))
                    nil)
                   ("2" (rewrite "length_of_fs2list")
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "sorted")
        (("2" (expand "is_sorted?")
          (("2" (expand "psorted")
            (("2" (expand "finseq_appl")
              (("2" (flatten)
                (("2" (hide 1)
                  (("2" (skeep)
                    (("2" (inst -1 "k")
                      (("1" (prop)
                        (("1" (lemma "same_nth_list_fseq")
                          (("1" (lemma "same_nth_list_fseq")
                            (("1" (inst -1 "finseq2list(s)" "k")
                              (("1"
                                (inst -2 "finseq2list(s)" "k + 1")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (rewrite "l2fs_fs2l_is_id")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1 2))
                                  (("2"
                                    (lemma "length_of_fs2list")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "length_of_fs2list")
                          (("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_of_fs2list")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((psorted const-decl "bool" sorting_seq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_of_fs2list formula-decl nil sorting_seq nil)
    (same_nth_fseq_list formula-decl nil sorting_seq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (sorted const-decl "bool" sorting_seq nil)
    (is_sorted? const-decl "bool" sorting nil)
    (same_nth_list_fseq formula-decl nil sorting_seq nil)
    (l2fs_fs2l_is_id formula-decl nil sorting_seq nil))
   shostak))
 (min_is_sorted_TCC1 0
  (min_is_sorted_TCC1-1 nil 3671730385 ("" (subtype-tcc) nil nil)
   ((is_sorted? const-decl "bool" sorting nil)) nil))
 (min_is_sorted 0
  (min_is_sorted-2 nil 3671731948
   ("" (induct "l")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (induct "k")
        (("1" (expand nth) (("1" (propax) nil nil)) nil)
         ("2" (skeep)
          (("2" (split)
            (("1" (expand nth)
              (("1" (inst -4 jb)
                (("1" (split)
                  (("1" (postpone) nil nil)
                   ("2" (expand is_sorted?)
                    (("2" (skeep)
                      (("2" (inst -4 k)
                        (("1" (split)
                          (("1" (postpone) nil nil)
                           ("2" (postpone) nil nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_sorted? const-decl "bool" sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (min_is_sorted-1 nil 3671730387
   ("" (induct "l")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "k =0")
          (("1" (assert) nil nil)
           ("2" (case "null?(cons2_var)")
            (("1" (typepred "k")
              (("1" (expand "length" -1)
                (("1" (expand "length" -1) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 "k - 1")
              (("1" (copy -2)
                (("1" (prop)
                  (("1" (expand "is_sorted?" -2)
                    (("1" (inst -2 0)
                      (("1" (prop)
                        (("1" (expand "nth" -1 2)
                          (("1" (expand "nth" 3 2)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (typepred "k")
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "is_sorted?")
                        (("2" (hide - 4)
                          (("2" (typepred "k") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (hide 4)
                      (("2" (expand "is_sorted?")
                        (("2" (skeep)
                          (("2" (inst -2 "k!1 +1")
                            (("1" (prop)
                              (("1"
                                (expand "nth" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "k!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 4)
                (("2" (typepred "k") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_sorted? const-decl "bool" sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (car_sorted_permutations_TCC1 0
  (car_sorted_permutations_TCC1-2 nil 3671750704
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (expand "permutations")
          (("" (prop)
            (("1" (hide-all-but (-1 1 2)) (("1" (grind) nil nil)) nil)
             ("2" (hide-all-but (-1 1 2)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_occurrences_same_length formula-decl nil sorting nil)
    (permutations const-decl "bool" sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (car_sorted_permutations_TCC1-1 nil 3671728300
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (expand "permutations")
          (("" (prop)
            (("1" (hide -)
              (("1" (typepred "l1") (("1" (grind) nil nil)) nil)) nil)
             ("2" (lemma "same_occurrences_same_length")
              (("2" (hide-all-but (-2 1 2)) (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_occurrences_same_length formula-decl nil sorting nil)
    (permutations const-decl "bool" sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (car_sorted_permutations_TCC2 0
  (car_sorted_permutations_TCC2-3 nil 3671750727
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (expand "permutations")
          (("" (prop)
            (("1" (hide-all-but (-1 1 2)) (("1" (grind) nil nil)) nil)
             ("2" (hide-all-but (-1 1 2)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_occurrences_same_length formula-decl nil sorting nil)
    (permutations const-decl "bool" sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (car_sorted_permutations_TCC2-2 nil 3671750672
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (expand "permutations")
          (("" (prop)
            (("1" (hide -) (("1" (typepred "l1") (("1" (grind) nil)))))
             ("2" (lemma "same_occurrences_same_length")
              (("2" (hide-all-but (-2 1 2))
                (("2" (grind) nil))))))))))))))
    nil)
   nil nil)
  (car_sorted_permutations_TCC2-1 nil 3671728300
   ("" (subtype-tcc) nil nil) nil nil))
 (car_sorted_permutations 0
  (car_sorted_permutations-2 nil 3671749571
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (copy -2)
          (("" (expand "permutations" -1)
            (("" (prop)
              (("1" (lemma "min_is_sorted")
                (("1" (copy -1)
                  (("1" (lemma "permutations_preserve_contents")
                    (("1" (copy -1)
                      (("1" (inst -1 "l1" "l2" 0)
                        (("1" (inst -2 "l2" "l1" 0)
                          (("1" (lemma "permutations_is_commutative")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -4 "l2" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -5 "l1" "j!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -4 1)
                                              (("1"
                                                (expand "nth" -5 1)
                                                (("1"
                                                  (expand "nth" -2 2)
                                                  (("1"
                                                    (expand "nth" -3 2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-4 1 2))
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-4 1 2))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "min_is_sorted")
                (("2" (copy -1)
                  (("2" (lemma "permutations_preserve_contents")
                    (("2" (copy -1)
                      (("2" (inst -1 "l1" "l2" 0)
                        (("1" (inst -2 "l2" "l1" 0)
                          (("1" (lemma "permutations_is_commutative")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -4 "l2" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -5 "l1" "j!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -4 1)
                                              (("1"
                                                (expand "nth" -5 1)
                                                (("1"
                                                  (expand "nth" -2 2)
                                                  (("1"
                                                    (expand "nth" -3 2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-4 1 2))
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-4 1 2))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_occurrences_same_length formula-decl nil sorting nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutations_preserve_contents formula-decl nil sorting nil)
    (min_is_sorted formula-decl nil unicity nil)
    (permutations const-decl "bool" sorting nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (car_sorted_permutations-1 nil 3671728909
   ("" (skeep)
    (("" (lemma "same_occurrences_same_length")
      (("" (inst -1 "l1" "l2")
        (("" (copy -2)
          (("" (expand "permutations" -1)
            (("" (prop)
              (("1" (lemma "min_is_sorted")
                (("1" (copy -1)
                  (("1" (lemma "permutations_preserve_contents")
                    (("1" (copy -1)
                      (("1" (inst -1 "l1" "l2" 1)
                        (("1" (inst -2 "l2" "l1" 1)
                          (("1" (lemma "permutations_is_commutative")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -4 "l2" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -5 "l1" "j!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -4 1)
                                              (("1"
                                                (expand "nth" -5 1)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (unicity_sorted_lists 0
  (unicity_sorted_lists-2 nil 3671728891
   ("" (induct "l1")
    (("1" (skeep)
      (("1" (lemma "same_occurrences_same_length")
        (("1" (inst -1 "null" "l2")
          (("1" (prop)
            (("1" (hide -2 -3 -4) (("1" (grind) nil nil)) nil)
             ("2" (skeep) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "same_occurrences_same_length")
          (("2" (inst -1 "cons(cons1_var, cons2_var)" "l2")
            (("2" (copy -3)
              (("2" (expand "permutations" -1)
                (("2" (assert)
                  (("2" (prop)
                    (("2" (hide -2)
                      (("2" (inst -2 "cdr(l2)")
                        (("1" (lemma "car_sorted_permutations")
                          (("1"
                            (inst -1 "cons(cons1_var, cons2_var)" "l2")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "permutations")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst? -3)
                                          (("2"
                                            (expand "occurrences" -3)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -5))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -4))
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-4 1))
                                    (("3"
                                      (expand "is_sorted?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst -2 "k+1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-2 -5 1))
                                    (("4"
                                      (expand "is_sorted?")
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (inst -3 "k+1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "length" -2 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "length" -2 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (expand "length" -1 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_sorted_permutations formula-decl nil unicity nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (occurrences def-decl "nat" sorting nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (same_occurrences_same_length formula-decl nil sorting nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_sorted? const-decl "bool" sorting nil)
    (permutations const-decl "bool" sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (unicity_sorted_lists-1 nil 3671296560
   ("" (induct "l1")
    (("1" (skeep)
      (("1" (lemma "same_occurrences_same_length")
        (("1" (inst -1 "null" "l2")
          (("1" (prop)
            (("1" (hide -2 -3 -4) (("1" (grind) nil nil)) nil)
             ("2" (skeep) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "same_occurrences_same_length")
          (("2" (inst -1 "cons(cons1_var, cons2_var)" "l2")
            (("2" (copy -3)
              (("2" (expand "permutations" -1)
                (("2" (assert)
                  (("2" (prop)
                    (("2" (hide -2)
                      (("2" (inst -2 "cdr(l2)")
                        (("1" (lemma "car_sorted_permutations")
                          (("1"
                            (inst -1 "cons(cons1_var, cons2_var)" "l2")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "permutations")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst? -3)
                                          (("2"
                                            (expand "occurrences" -3)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -5))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -4))
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-4 1))
                                    (("3"
                                      (expand "is_sorted?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst -2 "k+1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-2 -5 1))
                                    (("4"
                                      (expand "is_sorted?")
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (inst -3 "k+1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "length" -2 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "length" -2 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (expand "length" -1 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_sorted_permutations formula-decl nil unicity nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (occurrences def-decl "nat" sorting nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (same_occurrences_same_length formula-decl nil sorting nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_sorted? const-decl "bool" sorting nil)
    (permutations const-decl "bool" sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (unicity_sorted_seqs 0
  (unicity_sorted_seqs-1 nil 3671751228
   ("" (skeep)
    (("" (lemma "sorted_iff_is_sorted")
      (("" (copy -1)
        (("" (inst? -1)
          (("" (inst -2 "s2")
            (("" (assert)
              (("" (rewrite "perm_fsq_iff_perm_list")
                (("" (lemma "unicity_sorted_lists")
                  (("" (inst -1 "finseq2list(s1)" "finseq2list(s2)")
                    (("" (assert)
                      (("" (lemma "list2fseq_lem")
                        ((""
                          (inst -1 "finseq2list(s1)" "finseq2list(s2)")
                          (("" (iff)
                            (("" (flatten)
                              ((""
                                (hide -1)
                                ((""
                                  (split)
                                  (("1"
                                    (lemma "l2fs_fs2l_is_id")
                                    (("1"
                                      (copy -1)
                                      (("1"
                                        (inst -1 "s1")
                                        (("1"
                                          (inst -2 "s2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorted_iff_is_sorted formula-decl nil unicity nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (unicity_sorted_lists formula-decl nil unicity nil)
    (l2fs_fs2l_is_id formula-decl nil sorting_seq nil)
    (list2fseq_lem formula-decl nil sorting_seq nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (perm_fsq_iff_perm_list formula-decl nil sorting_seq nil))
   shostak))
 (func_eqQB 0
  (func_eqQB-3 nil 3671202322
   ("" (skeep)
    (("" (lemma quick_sort_works)
      (("" (lemma bubblesort_works)
        (("" (lemma unicity_sorted_lists)
          (("" (inst -1 "quick_sort(l)" "bubblesort(l)")
            (("" (inst -2 l)
              (("" (inst -3 l)
                (("" (flatten)
                  (("" (split)
                    (("1" (propax) nil nil)
                     ("2" (hide -1 -3)
                      (("2" (lemma permutations_is_transitive)
                        (("2"
                          (inst -1 "quick_sort(l)" "l" "bubblesort(l)")
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (bubblesort_works formula-decl nil unicity nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (quick_sort const-decl "[list[nat] -> list[nat]]" unicity nil)
    (bubblesort const-decl "[list[nat] -> list[nat]]" unicity nil)
    (permutations_is_transitive formula-decl nil sorting nil)
    (unicity_sorted_lists formula-decl nil unicity nil)
    (quick_sort_works formula-decl nil unicity nil))
   nil)
  (func_eqQB-2 nil 3671202195
   ("" (lemma "bubblesort_works")
    (("" (lemma "quick_sort_works")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (flatten)
              (("" (lemma "permutations_is_transitive")
                (("" (inst -1 "quick_sort(l)" "l" "bubblesort(l)")
                  (("" (assert)
                    (("" (rewrite "unicity_sorted_lists") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations_is_transitive formula-decl nil sorting nil)
    (unicity_sorted_lists formula-decl nil unicity nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (func_eqQB-1 nil 3671200584
   ("" (lemma "bubblesort_works")
    (("" (lemma "quick_sort_works")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (flatten)
              (("" (lemma "permutations_is_transitive")
                (("" (inst -1 "quick_sort(l)" "l" "bubblesort(l)")
                  (("" (assert) (("" (rewrite "unicity") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (permutations_is_transitive formula-decl nil sorting nil))
   shostak))
 (func_eqMH 0
  (func_eqMH-2 nil 3671202807
   ("" (skeep)
    (("" (lemma maxsort_works)
      (("" (lemma heapsort_works)
        (("" (lemma unicity_sorted_seqs)
          (("" (inst -1 "maxsort(s)" "heapsort(s)")
            (("" (inst -2 s)
              (("" (inst -3 s)
                (("" (flatten)
                  (("" (split)
                    (("1" (propax) nil nil)
                     ("2" (hide -1 -3)
                      (("2" (lemma permutations_equiv)
                        (("2" (flatten)
                          (("2" (expand reflexive?)
                            (("2" (expand symmetric?)
                              (("2"
                                (expand transitive?)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst -1 "s" "maxsort(s)")
                                    (("2"
                                      (inst
                                       -2
                                       "maxsort(s)"
                                       "s"
                                       "heapsort(s)")
                                      (("2"
                                        (split)
                                        (("1" (assert) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((heapsort_works formula-decl nil unicity nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (maxsort const-decl
     "[finite_sequence[nat] -> finite_sequence[nat]]" unicity nil)
    (heapsort const-decl
     "[finite_sequence[nat] -> finite_sequence[nat]]" unicity nil)
    (permutations_equiv formula-decl nil sorting_seq nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (unicity_sorted_seqs formula-decl nil unicity nil)
    (maxsort_works formula-decl nil unicity nil))
   nil)
  (func_eqMH-1 nil 3671202353
   ("" (lemma "maxsort_works")
    (("" (lemma "heapsort_works")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (flatten)
              (("" (lemma "permutations_equiv")
                (("" (flatten)
                  (("" (expand "transitive?")
                    (("" (expand "symmetric?")
                      (("" (hide -1)
                        ((""
                          (inst -1 "list2finseq[nat](l)"
                           " maxsort(list2finseq[nat](l))")
                          (("" (assert)
                            ((""
                              (inst -2 "maxsort(list2finseq[nat](l))"
                               "list2finseq[nat](l)"
                               "heapsort(list2finseq[nat](l))")
                              ((""
                                (assert)
                                ((""
                                  (rewrite "unicity_sorted_seq")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (permutations_equiv formula-decl nil sorting_seq nil))
   shostak))
 (func_eqQM 0
  (func_eqQM-2 nil 3671722875
   ("" (skeep)
    (("" (lemma quick_sort_works)
      (("" (inst -1 l)
        (("" (lemma maxsort_works)
          (("" (inst -1 s)
            (("" (lemma is_sorted_iff_sorted)
              (("" (inst -1 "quick_sort(l)")
                (("" (flatten)
                  (("" (split)
                    (("1" (split)
                      (("1" (lemma unicity_sorted_seqs)
                        (("1" (inst -1 "quick_sort(l)" "maxsort(s)")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (hide -1 -2 -3 -5)
                              (("2"
                                (lemma permutations_equiv)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (expand transitive?)
                                      (("2"
                                        (inst
                                         -1
                                         "quick_sort(l)"
                                         "l"
                                         "maxsort(s)")
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide -1 -3 2 3)
                                            (("2"
                                              (lemma
                                               perm_fsq_iff_perm_list)
                                              (("2"
                                                (inst
                                                 -1
                                                 "quick_sort(l)"
                                                 "l")
                                                (("2"
                                                  (lemma
                                                   fs2l_l2fs_is_id)
                                                  (("2"
                                                    (inst -1 l)
                                                    (("2"
                                                      (lemma
                                                       fs2l_l2fs_is_id)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "quick_sort(l)")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quick_sort_works formula-decl nil unicity nil)
    (maxsort_works formula-decl nil unicity nil)
    (is_sorted_iff_sorted formula-decl nil unicity nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (maxsort const-decl
     "[finite_sequence[nat] -> finite_sequence[nat]]" unicity nil)
    (transitive? const-decl "bool" relations nil)
    (perm_fsq_iff_perm_list formula-decl nil sorting_seq nil)
    (fs2l_l2fs_is_id formula-decl nil sorting_seq nil)
    (permutations_equiv formula-decl nil sorting_seq nil)
    (unicity_sorted_seqs formula-decl nil unicity nil)
    (quick_sort const-decl "[list[nat] -> list[nat]]" unicity nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (func_eqQM-1 nil 3671204373
   ("" (lemma "maxsort_works")
    (("" (lemma "quick_sort_works")
      (("" (skeep)
        (("" (inst? -1)
          (("" (inst? -2)
            (("" (flatten)
              (("" (replace -5 -4 rl)
                (("" (replace -5 -3 rl)
                  (("" (replace -5 1 rl)
                    (("" (lemma "perm_fsq_iff_perm_list")
                      ((""
                        (inst -1 "list2finseq[nat](quick_sort(l))"
                         "list2finseq(l)")
                        (("" (flatten)
                          (("" (assert)
                            ((""
                              (case "finseq2list(list2finseq(l)) = l AND finseq2list(list2finseq[nat](quick_sort(l))) = quick_sort(l)")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (lemma "permutations_equiv")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1 -2)
                                              (("1"
                                                (expand "transitive?")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "list2finseq[nat](quick_sort(l))"
                                                   "list2finseq(l)"
                                                   "maxsort(list2finseq(l))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -3 -5 1))
                                                      (("1"
                                                        (case
                                                         "sorted(list2finseq[nat](quick_sort(l)))")
                                                        (("1"
                                                          (rewrite
                                                           "unicity_sorted_seqs")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "is_sorted_impl_sorted")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (hide-all-but 1)
                                  (("1"
                                    (rewrite "fs2l_l2fs_is_id")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "fs2l_l2fs_is_id")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm_fsq_iff_perm_list formula-decl nil sorting_seq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (permutations_equiv formula-decl nil sorting_seq nil)
    (unicity_sorted_seqs formula-decl nil unicity nil)
    (sorted const-decl "bool" sorting_seq nil)
    (transitive? const-decl "bool" relations nil)
    (fs2l_l2fs_is_id formula-decl nil sorting_seq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak)))

