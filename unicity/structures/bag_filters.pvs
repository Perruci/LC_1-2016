%------------------------------------------------------------------------------
% Lee Pike 
% lee.s.pike@nasa.gov
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
% PURPOSE: 
% This theory presents two functions, l_filter and 
% u_filter, and some of their properties.  The 
% functions take a linearly-ordered bag and a value and 
% return a bag with all the elements larger and smaller,
% respectively, filtered out.  
%------------------------------------------------------------------------------

bag_filters[T: NONEMPTY_TYPE, 
            leq: (total_order?[T])]: 
THEORY

BEGIN 

IMPORTING
  finite_bags[T],
  finite_bags_minmax[T, leq],
  finite_bags_lems[T],
  finite_sets@finite_sets_minmax[T, leq],
  finite_bags_inductions[T],
  finite_sets@finite_sets_pred[T]

%  str_prelude_aux           %% same as finite_sets_pred_aux in sets_aux


  X        : VAR bag
  A,B,C    : VAR finite_bag
  D        : VAR nonempty_finite_bag
  x, i, v  : VAR T  

  %------ functions ----------------------

  l_filter(X, v): bag =  LAMBDA i: 
                           IF leq(i, v) THEN X(i) 
                           ELSE 0 ENDIF

  u_filter(X, v): bag =  LAMBDA i: 
                           IF leq(v, i) THEN X(i)
                           ELSE 0 ENDIF

  %------ propositions -------------------

  finite_l_filter      : LEMMA is_finite(A) IMPLIES is_finite(l_filter(A, i))

  finite_u_filter      : LEMMA is_finite(A) IMPLIES is_finite(u_filter(A, i))

  JUDGEMENT l_filter(A, i)  HAS_TYPE finite_bag

  JUDGEMENT u_filter(A, i)  HAS_TYPE finite_bag

  l_filter_extract     : LEMMA subbag?(extract(v, X), l_filter(X, v))

  u_filter_extract     : LEMMA subbag?(extract(v, X), u_filter(X, v))

  l_filter_singleton   : LEMMA l_filter(singleton_bag(v), v) = singleton_bag(v)

  u_filter_singleton   : LEMMA u_filter(singleton_bag(v), v) = singleton_bag(v)

  l_filter_subbag      : LEMMA subbag?(l_filter(X, v), X)

  u_filter_subbag      : LEMMA subbag?(u_filter(X, v), X)

  l_filter_orders      : LEMMA leq(i, v) IMPLIES 
                                    subbag?(l_filter(X, i), l_filter(X, v))

  u_filter_orders      : LEMMA leq(v, i) IMPLIES 
                                    subbag?(u_filter(X, i), u_filter(X, v))

  l_filter_orders_2    : LEMMA (leq(i, v) AND i /= v ) IMPLIES 
                                    subbag?(l_filter(X, i), 
                                            purge(v, l_filter(X, v)))

  u_filter_orders_2    : LEMMA (leq(v, i) AND i /= v ) IMPLIES 
                                    subbag?(u_filter(X, i), 
                                            purge(v, u_filter(X, v)))

  l_filter_insert_assoc: LEMMA l_filter(insert(i, X), i) 
                                  = insert(i, l_filter(X, i))

  u_filter_insert_assoc: LEMMA u_filter(insert(i, X), i) = 
                                    insert(i, u_filter(X, i))

  l_filter_insert      : LEMMA subbag?(l_filter(X,v), l_filter(insert(i,X), v))

  u_filter_insert      : LEMMA subbag?(u_filter(X,v), u_filter(insert(i,X), v))

  l_filter_purge       : LEMMA (leq(i, v) AND i /= v) IMPLIES 
                                   subbag?(l_filter(X, i), purge(v, X))

  u_filter_purge       : LEMMA (leq(i, v) AND i /= v) IMPLIES 
                                   subbag?(u_filter(X, v), purge(i, X))

  l_u_diff_disj        : LEMMA (leq(v, i) AND i /= v) IMPLIES
                                   disjoint?(l_filter(X, v), u_filter(X, i))

  l_u_fullset          : LEMMA union(purge(i, l_filter(X, i)), 
                                  u_filter(X, i)) = X

  l_u_fullset2         : LEMMA union(purge(i, u_filter(X, i)), 
                                  l_filter(X, i)) = X

  l_u_diff             : LEMMA card(l_filter(A, i)) + card(u_filter(A, i)) 
                                  = card(A) + A(i)

  subset_diff_elements : LEMMA (leq(v, i) AND i /= v) IMPLIES
                                   subbag?(union(l_filter(X, v), 
                                              u_filter(X, i)), X)

  card_diff_elements   : LEMMA (leq(v, i) AND i /= v) IMPLIES 
                                   card(l_filter(A, v)) + card(u_filter(A, i)) 
                                      <= card(A)

  card_plus            : LEMMA card(A) + card(B) = 
                                   card(union(A, B)) + card(intersection(A,B))

  pigeonhole           : LEMMA card(A) + card(B) > card(union(A,B)) IMPLIES
                                   EXISTS x: member(x,A) AND member(x,B)

  maj_pigeonhole       : LEMMA 2 * card(A) > card(C) AND 
                                   subbag?(A,C) AND
                                   2 * card(B) >= card(C) AND 
                                   subbag?(B,C) IMPLIES
                                     EXISTS x: member(x,A) AND member(x,B)

  l_filter_nonempty    : LEMMA 2 * card(l_filter(A, i)) > card(A) IMPLIES
                                    NOT empty?(l_filter(A, i)) 

  u_filter_nonempty    : LEMMA 2 * card(u_filter(A, i)) > card(A) IMPLIES
                                    NOT empty?(u_filter(A, i)) 

  l_filter_max         : LEMMA NOT empty?(l_filter(A, i)) IMPLIES 
                                    l_filter(A, i) = 
                                      l_filter(A, max(l_filter(A, i)))
    
  u_filter_min         : LEMMA NOT empty?(u_filter(A, i)) IMPLIES 
                                    u_filter(A, i) = 
                                      u_filter(A, min(u_filter(A, i)))

  l_filter_max_purge   : LEMMA NOT empty?(purge(i, l_filter(A, i))) IMPLIES
                                    l_filter(A, max(purge(i, l_filter(A, i))))
                                      = purge(i, l_filter(A, i))

  u_filter_min_purge   : LEMMA NOT empty?(purge(i, u_filter(A, i))) IMPLIES
                                    u_filter(A, min(purge(i, u_filter(A, i))))
                                      = purge(i, u_filter(A, i))

  filter_exists        :  LEMMA (EXISTS i: 2 * card(l_filter(A, i)) > card(A) 
                                      AND 2 * card(u_filter(A, i)) >= card(A))
                                OR empty?(A)

END bag_filters
