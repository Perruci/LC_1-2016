#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Formalização de Unicidade de Respostas para Algoritmos de Ordenação
\end_layout

\begin_layout Author
Logica Computacional 117366 
\begin_inset Newline newline
\end_inset

Turma D
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Lucas M.
 Chagas (12/0126643) e Pedro Henrique S.
 Perruci (14/0158596)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section*
Introdução
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ao longo do estudo das Estruturas de Dados, percebe-se que os 
\emph on
Algorítimos de Ordenação
\emph default
 têm importância fundamental na eficiência de processos.
 Alguns exemplos de métodos fundamentados em estruturas ordenadas, podemos
 citar a busca binária e algorítimos de união de listas.
 Como consequência de seus benefícios, métodos de ordenação são implementadas
 para as mais diversas estruturas de dados.
\end_layout

\begin_layout Standard
Sob o viés da lógica computacional, é essêncial garantir a unicidade de
 resultados dos métodos de ordenação.
 Dessa forma, pode-se provar que, para as mesmas entradas, uma mesma estrutura
 ordenada será obtida – independentemente do algorítimo escolhido.
 Támbem é coerente investigar que estruturas diferentes, portando os mesmos
 elementos, resultarão em estruturas ordenadas equivalentes.
\end_layout

\begin_layout Standard
O objetivo deste trabalho é justamente demonstrar a unicidade de respostas
 para os algorítimos de ordenação, implementados em listas e sequêcias finitas.
 Foram designados os métodos Quicksort
\emph on
 
\emph default
e Bubble Sort
\emph on
 
\emph default
voltados para o tipo abstrato 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{list}
\end_layout

\end_inset

, Heapsort
\emph on
 
\emph default
e Maxsort
\emph on
 
\emph default
para o tipo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{finite
\backslash
_sequences}
\end_layout

\end_inset

.
 Como ferramenta, foi utilizado o assistente de provas PVS, associado às
 bibliotecas PVS de NASA Langley Research Center.
\end_layout

\begin_layout Section
Questão 1
\end_layout

\begin_layout Subsection
Especificação do Problema
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A primeira questão do projeto consiste em demonstrar que o primeiro elemento
 de listas ordenadas é mínimo.
 Sua conjectura encontra-se expressa abaixo, no Algorithm 1.
 
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
min_is_sorted:
\end_layout

\begin_layout Plain Layout
|— — — — —
\end_layout

\begin_layout Plain Layout
[1] FORALL (l:list[nat], k : below[length(l)]) :
\begin_inset Newline newline
\end_inset

 is_sorted?(l) => null?(l) OR nth(l,0) <= nth(l,k)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Conjectura da Questão 1.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solução Proposta
\end_layout

\begin_layout Itemize
\begin_inset Formula $induct$
\end_inset

(
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir da indução na estrutura da lista l, a solução separa-se em dois
 ramos: base de indução e passo indutivo.
 A primeira resolve-se trivialmente, uma vez que a função de ordenação retorna
 verdadeiro para listas vazias.
 Por outro lado, o passo indutivo demanda demonstrar que, sabendo que o
 primeiro termo de uma lista 
\begin_inset Formula $L$
\end_inset

 é mínimo, mostrar que a propriedade se matêm quando adiciona-se um termo
 qualquer a 
\begin_inset Formula $L$
\end_inset

, sabendo que a lista resultante é ordenada.
 O sequênte resultante está expresso abaixo: 
\end_layout

\begin_layout LyX-Code
FORALL (j: below(length[L]):
\end_layout

\begin_deeper
\begin_layout LyX-Code
is_sorted(L) => null?(L) OR nth(L, 0) <= nth(L, j)
\end_layout

\end_deeper
\begin_layout LyX-Code
|— — — — —
\end_layout

\begin_layout LyX-Code
FORALL (k: below(length[cons(L, a : nat]):
\end_layout

\begin_deeper
\begin_layout LyX-Code
is_sorted(cons(L, a : nat)) => null?(cons(L, a : nat)) OR 
\end_layout

\begin_layout LyX-Code
nth(cons(L, a : nat), 0) <= nth(cons(L, a : nat), k)
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $induct$
\end_inset

(
\begin_inset Quotes eld
\end_inset

k
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Resolve-se, então, realizar indução também na variável de contagem 
\begin_inset Formula $k$
\end_inset

.
 Note que sua função é servir como iterador para representar todos os n-ésimos
 valores da lista 
\begin_inset Formula $cons(L,a)$
\end_inset

.
 Logo, induzir este parâmetro significa mostrar que a propriedade é válida
 para a base indutiva 
\begin_inset Formula $k=0$
\end_inset

 e, assumindo ser válida para 
\begin_inset Formula $k=jb$
\end_inset

, deve valer para 
\begin_inset Formula $jb+1$
\end_inset

.
 Novamente, resolver para a base de indução é trivial.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

( 
\begin_inset Formula $k=jb+1$
\end_inset

 ) 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para solucionar o passo indutivo, decide-se instanciar 
\begin_inset Formula $k\text{ com o valor }jb+1$
\end_inset

 e, assim, representar de forma equivalente os sequentes e consequentes.
 Esse passo dividiu a solução em diversos ramos.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $split$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Utilizou-se o comando 
\begin_inset Formula $(split)$
\end_inset

 para separar as implicações dos sequentes nos consequêntes.
 Os termos de cada sequente e consequente ficaram bem simplificados, no
 entanto, ampliou-se ainda mais a quantidade de ramos na demonstração.
\end_layout

\begin_layout Itemize
\begin_inset Formula $expand$
\end_inset

 is_sorted? e 
\begin_inset Formula $inst$
\end_inset

( k = jb )
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cada um dos ramos de prova que foram encontrados tinham uma característica
 em comum: poderiam ser solucionados expandindo a definição de lista ordenada
 e instanciando sua variável de contagem com o termo jb.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $expand$
\end_inset

 length e 
\begin_inset Formula $expand$
\end_inset

 list2finseq[nat]
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por meio da expansão e simplificação destes dois termos, todos os ramos
 foram solucionados com sucesso.
 Acabava necessário a chamada do comando 
\begin_inset Formula $assert$
\end_inset

 para validar as duas situações encontradas abaixo.
\end_layout

\begin_layout LyX-Code
[-1] jb < length(L)
\end_layout

\begin_layout LyX-Code
|— — — — —
\end_layout

\begin_layout LyX-Code
[1] jb <= length(L) - 1
\end_layout

\begin_layout Subsection
Considerações
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A demonstração foi realizada com sucesso.
 Contudo, acredita-se que existam soluções mais simples para o problema
 — uma vez que axiomas muito semelhantes foram encontrados na solução dos
 diversos ramos.
 Recomenda-se a aventureiros futuros tentar simplificar a solução aqui constatad
a.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Questão 2
\end_layout

\begin_layout Subsection
Especificação do Problema
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A segunda questão do projeto consiste em demonstrar que quick_sort(l) e
 bubblesort(l) são funcionalmente equivalentes, utilizando os principais
 resultados da unicidade.
 Sua conjectura encontra-se expressa abaixo, no Algorithm 2.
 
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
func_eqQB:
\end_layout

\begin_layout Plain Layout
|— — — — —
\end_layout

\begin_layout Plain Layout
[1] FORALL (l: list[nat]): quick_sort(l) = bubblesort(l)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Conjectura da Questão 2.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solução Proposta
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 
\begin_inset Quotes eld
\end_inset

quick_sort_works
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 
\begin_inset Quotes eld
\end_inset

bubblesort_works
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 
\begin_inset Quotes eld
\end_inset

unicity_sorted_lists
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para formalizar, usamos os lemas "quick_sort_works", "bubblesort_works"
 e "unicity_sorted_lists".
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 - 1 (quicksort(l) bubblesort(l) l)
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 - 2 (l)
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 - 3 (l)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instanciamos na fórmula -1 quick_sort(l) e bubblesort(l) para verificar
 a permutação entre quick_sort(l) e bubblesort(l) e verificar se as listas
 são sorteadas.
 Na fórmula -2 e -3 foi instanciado l para que possamos validar o que foi
 levantado pela fórmula -1.
\end_layout

\begin_layout Itemize
\begin_inset Formula $split$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Primeiramente, dividimos a conjunção em 4 subárvores, sendo que 3 dos 4
 itens são trivialmente verdade.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No caso onde não é trivial, tivemos que provar que as permutações de l,
 bubblesort(l) e quick_sort(l), l são transitivas.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 
\begin_inset Quotes eld
\end_inset

permutations_is_transitive
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para provar isso, tivemos que chamar o lemma "permutations_is_transitive".
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 (quick_sort(l) l bubblesort(l))
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instanciamos na fórmula -1 quick_sort(l), l e bubblesort(l), onde chegamos
 em três subárvores, sendo todas trivias, completando a prova.
\end_layout

\begin_layout Subsection
Considerações
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Foi utilizado alguns conceitos da Álgebra, como a transitividade, para resolver
 a questão.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Questão 3
\end_layout

\begin_layout Subsection
Especificação do Problema
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
func_eqMH : 
\end_layout

\begin_layout Plain Layout
|— — — — —
\end_layout

\begin_layout Plain Layout
[1] FORALL (s: finite_sequence[nat]): maxsort(s) = heapsort(s)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Conjectura da Questão 3.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solução Proposta
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na questão 3, assim como na questão 2, provamos que maxsort e heapsort são
 funcionalmente equivalentes, utilizando os principais resultados da unicidade
 Para formalizar, usamos os lemas "maxsort_works", "heapsort_works" e "unicity_s
orted_seqs".
 
\end_layout

\begin_layout Standard
Instanciamos na fórmula -1 maxsort(s) e heapsort(s) para verificar a permutação
 entre maxsort(s) e heapsort(s) e verificar se as listas são sorteadas.
 
\end_layout

\begin_layout Standard
Primeiramente, dividimos a conjunção em 4 subárvores.
 3 dos 4 itens são triviais.
 No caso onde não é trivial, tivemos que provar que as permutações de s,
 maxsort(s) e s, heapsort(s) são transitivas e que a permutação(s, maxsort(s))
 e permutação (maxsort(s),s) são simétricas.
 
\end_layout

\begin_layout Standard
Para provar isso, tivemos que chamar o lemma "permutations_equiv".
\end_layout

\begin_layout Standard
Tivemos que expandir a fórmula de symmetric para verificar a simetria da
 permutação(s, maxsort(s)).
 Obtemos, assim, a simetria da permutação(s, maxsort(s)) e permutação(maxsort(s)
, s).
\end_layout

\begin_layout Standard
Expandimos também a fórmula de transitive para verificar a transitividade
 entre a permutação(maxsort(s), s) e permutação (s, heapsort(s)).
\end_layout

\begin_layout Standard
Com a expansão, dividimos a conjunção e assim chegamos na conclusão da prova.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage{}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Questão 4
\end_layout

\begin_layout Subsection
Especificação do Problema
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questão 4 consiste em demonstrar a unicidade de resultados entre as funções
 quick_sort e maxsort — a primeira elaborada para listas e a segunda para
 sequências finitas.
 utilizar bem as transformações 
\begin_inset Formula $list2finseq$
\end_inset

 e 
\begin_inset Formula $finseq2list$
\end_inset

 e suas prpriedades será fundamental para a prova.
 A conjectura para a questão encontra-se expressa abaixo.
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
func_eqQM : 
\end_layout

\begin_layout Plain Layout
|— — — — —
\end_layout

\begin_layout Plain Layout
[1] FORALL (l: list[nat], s: finite_sequence[nat]):
\end_layout

\begin_layout Plain Layout
list2finseq(l)=s IMPLIES
\end_layout

\begin_layout Plain Layout
list2finseq[nat](quick_sort(l)) = maxsort(s)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Conjectura da Questão 4
\emph on
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solução Proposta
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O sequente da conjectura pode ser simplificado pela chamada do comando 
\begin_inset Formula $(skeep)$
\end_inset

.
 Fica então, mais explícita a situação de nossa prova.
\end_layout

\begin_layout LyX-Code
[-1] list2finseq(l) = s
\end_layout

\begin_layout LyX-Code
|— — — — —
\end_layout

\begin_layout LyX-Code
[1] list2finseq( quick_sort(l) ) = maxsort(s)
\end_layout

\begin_layout Standard
A solução encontrada pode ser dividida em três etapas principais.
 Seu detalhamento, será feito nas subseções logo em seguida.
\end_layout

\begin_layout Enumerate
Mostrar que ambos os métodos de ordenação são funcionais;
\end_layout

\begin_layout Enumerate
Provar a unicidade entre os métodos, de forma semelhante a realizada nas
 questões 2 e 3;
\end_layout

\begin_layout Enumerate
Concluir sua equivalência por meio das propriedades de transformações de
 tipos abstratos.
\end_layout

\begin_layout Subsubsection
Parte 1 — Mostrar que ambos os métodos de ordenação são funcionais
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 quick_sort_works, 
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 maxsort_works, 
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

s
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 is_sorted_iff_sorted, 
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

quick_sort(l)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O objetivo principal dessa etapa é reunir sequentes valiosos para a demonstração
 a partir da funcionalidade dos métodos de ordenação.
 Para tanto, é necessário convocar os lemas expressos acima.
 O último deles, 
\emph on
is_sorted_iff_sorted
\emph default
, garante que se uma lista é ordenada, sua sequência equivalente também
 encontra-se ordenada.
\end_layout

\begin_layout Subsubsection
Parte 2 — Provar a unicidade entre os métodos
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 unicity_sorted_seqs
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

( 
\begin_inset Quotes eld
\end_inset

list2finseq( quick_sort(l)
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

maxsort(s)
\begin_inset Quotes erd
\end_inset

 )
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Semelhantemente ao realizado nas questões 2 e 3, realizou-se a chamada do
 lema da unicidade em sequências.
 Instanciá-los nos termos das estruturas ordenadas quick_sort(l) e maxsort(s)
 foi essencial para encontrar sub-árvores triviais e encaminhar bem a demonstraç
ão.
 Em seguida, resta-nos provar que os mesmos elementos constam na lista ordenada
 e sua sequência correspondente ordenado.
 O sequente em seguida expressa tal situação:
\end_layout

\begin_layout LyX-Code
[-1] permutations( s, maxsort(s) )
\end_layout

\begin_layout LyX-Code
[-2] permutations( quick_sort(l), l )
\end_layout

\begin_layout LyX-Code
[-3] list2finseq(l) = s
\end_layout

\begin_layout LyX-Code
|— — — — —
\end_layout

\begin_layout LyX-Code
[1] permutations( list2fiseq( quicksort(l) ), maxsort(s) )
\end_layout

\begin_layout LyX-Code
[2] list2finseq( quick_sort(l) ) = maxsort(s) 
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 permutations_equiv
\end_layout

\begin_layout Itemize
\begin_inset Formula $expand$
\end_inset

 transitive?
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

list2finseq( quick_sort(l) )
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

list2finseq( l )
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

maxsort(s)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A propriedade de transitividade de sequências é convocada para mostrar que
 permutação dos termos [-1], [-2], associados à [-3], equivalem à permutação
 [1].
 Foi instanciada de forma a obter soluções triviais para sub-árvores.
 Resta-nos provar o seguinte sequente para concluir a prova:
\end_layout

\begin_layout LyX-Code
[-1] permutations( quick_sort(l), l )
\end_layout

\begin_layout LyX-Code
|— — — — —
\end_layout

\begin_layout LyX-Code
[1] permutations( list2fiseq( quicksort(l) ), list2fiseq( l ) 
\end_layout

\begin_layout Subsubsection
Parte 3 — Concluir equivalência por meio das propriedades de transformações
 de tipos abstratos
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 perm_fsq_iff_perm_list
\end_layout

\begin_layout Itemize
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

quick_sort(l)
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
É evidente nossa prova já está praticamente concluída.
 A última alteração nessesária é mostrar que a transformação 
\emph on
list2finseq
\emph default
 não interfere na permutação de seus elementos, representada pelo lema convocado.
\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 fs2l_l2fs_is_id, 
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $lemma$
\end_inset

 fs2l_l2fs_is_id, 
\begin_inset Formula $inst$
\end_inset

 
\begin_inset Quotes eld
\end_inset

quick_sort(l)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por fim, a dupla chamada desse lema prova a equivalência das transformações
 
\emph on
list2finseq 
\emph default
e
\emph on
 finseq2list
\emph default
, que acabam resultando da instanciação do lema do item anterior.
\end_layout

\begin_layout Itemize
\begin_inset Formula $flatten$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $split$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $assert$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A prova é finalmente concluída a partir da simplificação dos lemas convocados
 e uma chamada do comando 
\begin_inset Formula $(assert)$
\end_inset

.
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage{}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section*
Conclusão
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
paragraph{}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
